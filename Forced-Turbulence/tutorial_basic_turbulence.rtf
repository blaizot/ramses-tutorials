{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-LightOblique;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\fswiss\fcharset0 Helvetica-Bold;\f4\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red49\green49\blue49;\red169\green14\blue26;
\red83\green83\blue83;}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18039;\cssrgb\c25098\c25098\c25098;\cssrgb\c72941\c12941\c12941;
\cssrgb\c40000\c40000\c40000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww24800\viewh16580\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 The tools we use are RAMSES and Osyris. More information on the codes here:\
https://github.com/nvaytet/osyris\
https://bitbucket.org/rteyssie/ramses/src/master/\
\
To install osyris, simply do \

\f1\i\fs27\fsmilli13600 \cf2 \expnd0\expndtw0\kerning0
pip install osyris
\fs24 \cf0 \kerning1\expnd0\expndtw0   \

\f0\i0 in your terminal. You can also install it by cloning directly the source. In this case, please follow the instruction on the GitHub webpage (https://osyris.readthedocs.io/en/latest/installation.html).\
\
\
To download RAMSES, do in your terminal\

\f1\i git clone https://bitbucket.org/rteyssie/ramses.git\

\f0\i0 \
To compile ramses, you need at least a fortran compiler, either fortran (GNU compiler) or ifort (Intel compiler). You can get more information on the GNU compiler here:\
https://gcc.gnu.org/fortran/\
https://fortran-lang.org/learn/os_setup/install_gfortran\
\
To run the turbulence driving simulations, you also need the FFTW library. Please follow what is explained in the file r
\f2\i amses/turb/README
\f0\i0 .\
\

\f3\b I/ Use osyris to visualise data (i
\f0\b0 n ipython3)\
\
import osyris\
import numpy as np\
\
data = osyris.load(20) 
\f2\i # load output number 20. Default length unit is AU.\
# Choose the center of the box\

\f0\i0 xc=data.meta["boxlen"]*data.meta["unit_l"]/2./1.496e13 \
center=osyris.Array(values=np.array([[xc,xc,xc]]), unit="au")\

\f2\i \
# Size of the box you want to plot
\f0\i0 \
dx_box=data.meta["boxlen"]*data.meta["unit_l"]/1.496e13\
\
osyris.plane(\{"data": data["density"], "norm": "log"\}, direction="z",origin=center,dx=dx_box)\
plt.show()\
\
\
You can now play with the data (do PDF of the 3D density, compute the RMS velocity), using the doc of osyris to manipulate the arrays (e.g. try 
\f4 \cf3 \expnd0\expndtw0\kerning0
data[\cf4 "density"\cf3 ]\cf5 .\cf3 values)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 The documentation is accessible here: https://osyris.readthedocs.io/en/latest/index.html\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f3\b \cf0 \
II/ Run RAMSES
\f0\b0 \
\
Once you downloaded RAMSES, go in the main directory (
\f2\i cd ramses
\f0\i0 )\
\
II.1/ You can first run the test suite:\

\f2\i cd tests\
./run_test_suite.sh\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\i0 \cf0 For each test, there is first a compilation (using the config.txt file of each test), then the code runs (using the namelist files .nml) and finally results are  plotted using the plot-test-name.py routines.\
\
There are various options for the test suite:  \
#   - Run the suite in parallel (on 4 cpus):\
#       ./run_test_suite.sh -p 4\
#   - Do not delete results data:\
#       ./run_test_suite.sh -d\
#   - Run in verbose mode:\
#       ./run_test_suite.sh -v\
#   - Select test number (for tests 3 to 5, and 10):\
#       ./run_test_suite.sh -t 3-5,10\
#   - Run all tests in mhd directory:\
#       ./run_test_suite.sh -t mhd\
#   - Run quick test suite:\
#       ./run_test_suite.sh -q\
\
The option \'93-d\'94 is quite useful if you want to work more on the data than what is proposed in the test suite. I would also recommend to use the \'93
\f2\i -y\'94 
\f0\i0 option to use python for visualisation.\
\
The turbulence driving test is the test number [ 7]. You will find in the directory t
\f2\i ests/turb/driving 
\f0\i0  the routine 
\f2\i plot-driving.py 
\f0\i0 that can be an alternative to the use of osyris. In particular, you can produce column density maps that could be applied to the tools you learned last week!\
\
Of course, you can also play with all the other tests! Note that you can find information on the namelist parameters you can play with here: https://bitbucket.org/rteyssie/ramses/wiki/Content (or in the RAMSES user guide PDF file you can also download). \
\
\
II.1/ You can then compile directly ramses\
\
Go to the bin directory and update the Makefile: NDIM=3 & USE_TURB=1 (note that this corresponds to the FLAGS indicated in the file config.txt of the turbulence driving test)\
Then, still in the bin directory\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\i \cf0 make clean
\f0\i0   (to remove old compiled files)\

\f2\i make
\f0\i0 \
\
You should have a file ramses3d that has been created. You can then run ramses:\

\f2\i cd ../tests/turb/driving/\
cp ../../../bin/ramses3d .\
./ramses3d driving.nml
\f0\i0  (or if you have MPI installed you can run on 4 processors: 
\f2\i mpirun -np 4 ramses3d driving.nml
\f0\i0 )\
\
You can now play with the namelist parameters. You can change the resolution (levelmin=5, levelmax=5 for a 32^3 resolution simulation).\
You can add more outputs using the parameter foutput in &OUTPUT_PARAMS\
&OUTPUT_PARAMS\
noutput=2\
tout=0.0,0.5\
fourput=25 ! Output every 25 steps\
/\
\
\
Enjoy!\
\
}